---
interface Props {
  texts?: string[];
  speed?: number;
  delay?: number;
  blinkerClass?: string;
  textClass?: string;
}

const { texts, speed, delay, blinkerClass, textClass } = Astro.props;
---

<wts-typer
  data-texts={JSON.stringify(texts)}
  data-delay={delay}
  data-speed={speed}
>
  <span class={`typer ${textClass}`}></span>
  <span class={`blinker text-amber-500 ${blinkerClass ?? ""}`}>|</span>
</wts-typer>

<script>
  import { typeOut } from "../utils/typer";

  class TyperElement extends HTMLElement {
    constructor() {
      super();

      const texts = JSON.parse(this.dataset.texts!);
      const speed = parseInt(this.dataset.speed! ?? "100");
      const delay = parseInt(this.dataset.delay! ?? "3000");
      const typer = this.querySelector<HTMLElement>(".typer")!;
      const blinker = this.querySelector<HTMLElement>(".blinker")!;

      typeOut(typer, blinker, texts, speed, delay);
    }
  }

  customElements.define("wts-typer", TyperElement);
</script>

<style>
  .blinker {
    animation: blink 1s step-start infinite reverse;
  }
  @keyframes blink {
    0% {
      opacity: 0;
    }
    50% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }
</style>
